/* 
Creating neurons
*/

neuron a(inhibitory);neuron b(excitatory);
neuron c(xcitatory);neuron d(inhibitory,100);

// Innervating
aaa >> 11;
a >> b >> c; a >> b >> c >> d >> e;

  
a + b;
a >> d;
d >> c;

// Defining input
SendCurrent(a,b);
SendCurrent(a);
Hola(a);

// Initialization
Run;
RunSystem;


/*
1 goal -> expr                              $$ MakeNothing()

2 expr -> define ; expr'                    $$ MakeNeuronNode()
3 expr -> innervate ; expr'                 $$ MakeNothing()
4 expr -> input ; expr'                     $$ MakeSendCurrentNode()
5 expr -> start ;                           $$ MakeNothing()

6 expr' -> define ; expr'                   $$ MakeNeuronNode()
7 expr' -> innervate ; expr'                $$ MakeNothing()
8 expr' -> input ; expr'                    $$ MakeSendCurrentNode()
9 expr' -> ''                               $$ MakeNothing()
  
10 define -> neuron id ( param_d )           $$ if(!ExistNeuron(id))
                                                MakeNeuronIdNode(id)
                                             else
                                                Error -> duplicated_neuron
11 param_d -> inhibitory param_d'            $$ MakeInhibitoryNode()
12 param_d -> excitatory param_d'            $$ MakeExcitatoryNode()
13 param_d' -> , num                         $$ MakeIntensityNeuronNode(num) and
                                                MakeInnervationNode()
14 param_d' -> ''                            $$ MakeInnervationNode()

15 innervate -> id0 >> id1 innervate'        $$ if(ExistNeuron(id0) && ExistNeuron(id1))
                                                MakeInnervationConnection(id0,id1)
                                             else
                                                Error -> neuron_not_created
16 innervate' -> >> id2 innervate'           $$ if(ExistNeuron(id1,id2))
                                                MakeInnervationConnection(id1,id2)
                                             else
                                                Error -> neuron_not_created
17 innervate' -> ''                          $$ MakeNothing()

18 input -> SendCurrent ( id param_i )       $$ if(ExistNeuron(id))
                                                MakeSendCurrentConnection(id)
                                             else
                                                Error -> neuron_not_created
19 param_i -> , id param_i                   $$ if(ExistNeuron(id))
                                                MakeSendCurrentConnection(id)
                                             else
                                                Error -> neuron_not_created
20 param_i -> ''                             $$ MakeNothing()

21 start -> RunSystem                        $$ MakeRunSystemNode(AllSendCurentNodes)


FIRST +

            FIRST                              FOLLOW
goal        {exp}	                              {$}	          
expr        {neuron,id,SendCurrent,RunSystem}	  {undefined}	  
expr'       {'',neuron,id,SendCurrent}	        {}	          
define      {neuron}	                          {;}	          
param_d     {inhibitory,excitatory}	            {)}	          
param_d'    {,,''}	                            {)}	          
innervate   {id}	                              {;}	          
innervate'  {>>,''}	                            {;}	          
input       {SendCurrent}	                      {;}	          
param_i     {,,''}	                            {)}	          
start       {RunSystem}	                        {}	          

*/

Scanner finished successfully
**************** SCANNER COUTS ****************
        Lines scanned: 18
        lines out: 8
        blank lines: 10
        output_scanner info:

size: 8
5 neuron id ( inhibitory , num ) ; $
6 neuron id ( excitatory ) ; $
7 neuron id ( excitatory ) ; $
8 neuron id ( inhibitory ) ; $
11 id >> id >> id ; $
12 id >> id ; $
15 SendCurrent ( id ) ; $
18 RunSystem ; $
        clean_code info:

size: 8
5 neuron a ( inhibitory , 100 ) ;
6 neuron b ( excitatory ) ;
7 neuron c ( excitatory ) ;
8 neuron d ( inhibitory ) ;
11 a >> d >> c ;
12 a >> b ;
15 SendCurrent ( a ) ;
18 RunSystem ;
**********************************************

////////////////////////////////////////////////////////////////////////////

--> Parsing: neuron id ( inhibitory , num ) ;
Parser finished successfully

 $ goal
 $ expr
 $ expr+ ; define
 $ expr+ ; ) param_d ( id neuron
 $ expr+ ; ) param_d ( id
 $ expr+ ; ) param_d (
 $ expr+ ; ) param_d
 $ expr+ ; ) param_d+ inhibitory
 $ expr+ ; ) param_d+
 $ expr+ ; ) num ,
 $ expr+ ; ) num
 $ expr+ ; )
 $ expr+ ;
 $ expr+
 $
                                   goal
                                    |
                       ____________expr____________
                      /                       \    \
    ________________define________________   [;] expr+
   /      /    /            \             \
[neuron] [id] [(]       _param_d__       [)]
                       /          \
                  [inhibitory] param_d+
                                /    \
                               [,] [num]

--> Parsing: neuron id ( excitatory ) ;
Parser finished successfully

 $ goal
 $ expr
 $ expr+ ; define
 $ expr+ ; ) param_d ( id neuron
 $ expr+ ; ) param_d ( id
 $ expr+ ; ) param_d (
 $ expr+ ; ) param_d
 $ expr+ ; ) param_d+ excitatory
 $ expr+ ; ) param_d+
 $ expr+ ; )
 $ expr+ ;
 $ expr+
 $
                                   goal
                                    |
                       ____________expr___________
                      /                      \    \
    ________________define_______________   [;] expr+
   /      /    /            \            \
[neuron] [id] [(]       _param_d__      [)]
                       /          \
                  [excitatory] param_d+

--> Parsing: neuron id ( excitatory ) ;
Parser finished successfully

 $ goal
 $ expr
 $ expr+ ; define
 $ expr+ ; ) param_d ( id neuron
 $ expr+ ; ) param_d ( id
 $ expr+ ; ) param_d (
 $ expr+ ; ) param_d
 $ expr+ ; ) param_d+ excitatory
 $ expr+ ; ) param_d+
 $ expr+ ; )
 $ expr+ ;
 $ expr+
 $
                                   goal
                                    |
                       ____________expr___________
                      /                      \    \
    ________________define_______________   [;] expr+
   /      /    /            \            \
[neuron] [id] [(]       _param_d__      [)]
                       /          \
                  [excitatory] param_d+

--> Parsing: neuron id ( inhibitory ) ;
Parser finished successfully

 $ goal
 $ expr
 $ expr+ ; define
 $ expr+ ; ) param_d ( id neuron
 $ expr+ ; ) param_d ( id
 $ expr+ ; ) param_d (
 $ expr+ ; ) param_d
 $ expr+ ; ) param_d+ inhibitory
 $ expr+ ; ) param_d+
 $ expr+ ; )
 $ expr+ ;
 $ expr+
 $
                                   goal
                                    |
                       ____________expr___________
                      /                      \    \
    ________________define_______________   [;] expr+
   /      /    /            \            \
[neuron] [id] [(]       _param_d__      [)]
                       /          \
                  [inhibitory] param_d+

--> Parsing: id >> id >> id ;
Parser finished successfully

 $ goal
 $ expr
 $ expr+ ; innervate
 $ expr+ ; innervate+ id >> id
 $ expr+ ; innervate+ id >>
 $ expr+ ; innervate+ id
 $ expr+ ; innervate+
 $ expr+ ; innervate+ id >>
 $ expr+ ; innervate+ id
 $ expr+ ; innervate+
 $ expr+ ;
 $ expr+
 $
                         goal
                          |
            _____________expr_____________
           /                         \    \
  _____innervate______              [;] expr+
 /    /    |          \
[id] [>>] [id]   _innervate+_
                /    /       \
               [>>] [id] innervate+

--> Parsing: id >> id ;
Parser finished successfully

 $ goal
 $ expr
 $ expr+ ; innervate
 $ expr+ ; innervate+ id >> id
 $ expr+ ; innervate+ id >>
 $ expr+ ; innervate+ id
 $ expr+ ; innervate+
 $ expr+ ;
 $ expr+
 $
                    goal
                     |
           _________expr________
          /                \    \
  ____innervate____       [;] expr+
 /    /    \       \
[id] [>>] [id] innervate+

--> Parsing: SendCurrent ( id ) ;
Parser finished successfully

 $ goal
 $ expr
 $ expr+ ; input
 $ expr+ ; ) param_i id ( SendCurrent
 $ expr+ ; ) param_i id (
 $ expr+ ; ) param_i id
 $ expr+ ; ) param_i
 $ expr+ ; )
 $ expr+ ;
 $ expr+
 $
                             goal
                              |
                    _________expr________
                   /                \    \
       __________input__________   [;] expr+
      /        /   |      \     \
[SendCurrent] [(] [id] param_i [)]

--> Parsing: RunSystem ;
Parser finished successfully

 $ goal
 $ expr
 $ ; start
 $ ; RunSystem
 $ ;
 $
        goal
         |
      __expr_
     /       \
   start    [;]
     |
[RunSystem]